# -*- coding: utf-8 -*-
"""Submission 2 - Time Series - BPML - Hazmi Cokro.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1DWcFsoYKKFvhC2g0yP9LkjXwvoN73obQ

Mochammad Hazmi Cokro Mandiri
> Dataset : "Global Climate Change Data" \
> Sumber : Data World \
> Link Dataset : https://data.world/data-society/global-climate-change-data

Library
"""

# u/ dataframe
import pandas as pd
import numpy as np

# u/ split data
from sklearn.model_selection import train_test_split

# u/ preprocessing dan layer
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM,Dense,Bidirectional,Dropout

# u/ visualisasi plot
import matplotlib.pyplot as plt

"""Read Dataset"""

df = pd.read_csv('https://query.data.world/s/tu7xkafdc4jbuzmuh5zxqaeshwj7sv', encoding= 'unicode_escape')
df.head()

"""Drop Kolom"""

df.drop(['City','Latitude','Longitude'], axis=1, inplace=True)
display(df)

"""Mengambil data dari tahun 1900 - 2013"""

df['dt'] = pd.to_datetime(df['dt'])  
get_data = (df['dt'] > '1900-01-01') & (df['dt'] <= '2013-09-01')
df.loc[get_data]

df = df.loc[get_data]
display(df)

"""Mengambil data milik negara India"""

df = df.loc[df['Country'].isin(['India'])]
display(df)

"""Reset Index dataframe dan drop kolom country"""

df.drop(['Country'], axis=1, inplace=True)
df.reset_index(drop=True)

"""Mengecek nilai null / nan"""

df.isnull().sum()

"""Drop baris yg memiliki nilai null / nan"""

df.dropna(subset=['AverageTemperature'],inplace=True)
df.dropna(subset=['AverageTemperatureUncertainty'],inplace=True)
df.isnull().sum()

"""Plot tiap kolom"""

df_plot = df
df_plot[df_plot.columns.to_list()].plot(subplots=True, figsize=(15, 9))
plt.show()

"""Plot dates dan Average temperature"""

dates = df['dt'].values
temp = df['AverageTemperature'].values

dates = np.array(dates)
temp = np.array(temp)

plt.figure(figsize=(15,9))
plt.plot(dates, temp)

plt.title('Average Temperature', fontsize = 20)
plt.ylabel('Temperature')
plt.xlabel('Datetime')

df.dtypes

"""Split Dataset"""

x_train, x_valid, y_train, y_valid = train_test_split(temp, dates, train_size=0.8, test_size = 0.2, shuffle = False )

"""Total data train (80%) dan validation (20%)"""

print('Total Data Train : ',len(x_train))
print('Total Data Validation : ',len(x_valid))

"""Merubah data u/ dapat diterima model"""

def windowed_dataset(series, window_size, batch_size, shuffle_buffer):
  series = tf.expand_dims(series, axis=-1)
  ds = tf.data.Dataset.from_tensor_slices(series)
  ds = ds.window(window_size + 1, shift=1, drop_remainder = True)
  ds = ds.flat_map(lambda w: w.batch(window_size + 1))
  ds = ds.shuffle(shuffle_buffer)
  ds = ds.map(lambda w: (w[:-1], w[-1:]))
  return ds.batch(batch_size).prefetch(1)

"""Pemodelan Sequential"""

tf.keras.backend.set_floatx('float64')

train_set = windowed_dataset(x_train, window_size=64, batch_size=200, shuffle_buffer=1000)
val_set = windowed_dataset(x_valid, window_size=64, batch_size=200, shuffle_buffer=1000)

model = Sequential([
    Bidirectional(LSTM(60, return_sequences=True)),
    Bidirectional(LSTM(60)),
    Dense(30, activation="relu"),
    Dense(10, activation="relu"),
    Dense(1),
])

"""Menghitung nilai 10% MAE u/ penerapan callback"""

Mae = (df['AverageTemperature'].max() - df['AverageTemperature'].min()) * 10/100
print(Mae)

"""Penggunaan Callback <10% MAE"""

class myCallback(tf.keras.callbacks.Callback):
  def on_epoch_end(self, epoch, logs={}):
    if(logs.get('mae')<2.4 and logs.get('val_mae')<2.4):
      print("\nMAE dari model < 10% skala data")
      self.model.stop_training = True
callbacks = myCallback()

"""Penggunaan learning rate SGD untuk optimizer"""

optimizer = tf.keras.optimizers.SGD(lr=1.0000e-04, momentum=0.9)

model.compile(loss=tf.keras.losses.Huber(),
              optimizer=optimizer,
              metrics=["mae"])

history = model.fit(train_set, epochs=100, validation_data = val_set, callbacks=[callbacks])

"""Plot Akurasi dan Loss"""

# Plot Accuracy
plt.plot(history.history['mae'])
plt.plot(history.history['val_mae'])
plt.title('Akurasi Model')
plt.ylabel('Mae')
plt.xlabel('epoch')
plt.legend(['Train', 'Val'], loc='upper left')
plt.show()

# Plot Loss
plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('Loss Model')
plt.ylabel('loss')
plt.xlabel('epoch')
plt.legend(['Train', 'Val'], loc='upper left')
plt.show()